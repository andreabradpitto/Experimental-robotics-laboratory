<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="world_assignment" />
  <!-- Note that 'headless' is currently non-functional.
       See gazebo_ros_pkgs issue #491 (-r arg does not disable
       rendering, but instead enables recording). The arg definition
       has been left here to prevent breaking downstream
       launch files, but it does nothing. -->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find assignment2)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" 
    respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics)
    $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient"
      respawn="false" output="screen"/>
  </group>

  <arg name="ns1" value="robot"/>
  <param name="$(arg ns1)/robot_description" 
	 command="$(find xacro)/xacro --inorder $(find assignment2)/urdf/robot.xacro" />
	
  <arg name="ns2" value="ball"/> 
	 <param name="$(arg ns2)/ball_description" 
	 command="$(find xacro)/xacro --inorder $(find assignment2)/urdf/ball.xacro" />
	
	 <param name="human_description1" textfile="$(find assignment2)/urdf/human.urdf" />
      
  <node name="urdf_spawner_human1" pkg="gazebo_ros" type="spawn_model"
    respawn="false" output="screen"
  args="-urdf -model human1 -param human_description1 -x -7 -y 7 -z 0.34 -R 0 -P 0 -Y 0"/>

  <!-- group for the robotic dog -->
  <group ns="$(arg ns1)">

  <!-- parameters -->
    <!-- parameter specifying robot current state -->
    <param name='state' type='string' value='sleep'/>
    <!-- parameter specifying robot current position (x coordinate) -->
    <param name='dog/x' type='int' value='0'/>
    <!-- parameter specifying robot current position (y coordinate) -->
    <param name='dog/y' type='int' value='0'/>
    <!-- parameter specifying the maximum x-axis value for the map -->
    <param name='map/x_max' type='int' value='8'/>
    <!-- parameter specifying the maximum y-axis value for the map -->
    <param name='map/y_max' type='int' value='8'/>
    <!-- parameter specifying the minimum x-axis value for the map -->
    <param name='map/x_min' type='int' value='-8'/>
    <!-- parameter specifying the minimum y-axis value for the map -->
    <param name='map/y_min' type='int' value='-8'/>
    <!-- parameter specifying robot home position (x coordinate) -->
    <param name='home/x' type='int' value='-5'/>
    <!-- parameter specifying robot home position (y coordinate) -->
    <param name='home/y' type='int' value='7'/>
    <!-- parameter used to scale simulation velocity -->
    <param name='sim_scale' type='int' value='1'/>
    <!-- parameter used to specify whether the ball is detected or not -->
    <param name='ball_detected' type='int' value='0'/>

  <!-- nodes -->
  	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
      respawn="false" output="screen"
	  args="-urdf -model $(arg ns1) -param robot_description -x -5 -y 7 -Y 3.14 -z 0.05"/>

    <!-- node used to handle the robot's finite state machine internal architecture -->
    <node pkg='assignment2' type='dog_control.py'
      name='dog_control_node' output='screen' respawn="false"/>
    <!-- node used to control the robotic dog while it is
         in normal or sleeping state -->
    <node pkg='assignment2' type='dog_fsm.py'
      name='dog_fsm_node' output='screen' respawn="false"/>

    <!-- node used to control the robot while it is playing -->
    <node pkg='assignment2' type='dog_control_ball.py'
      name='dog_control_ball_node' output='screen' respawn="false"/>

    <!-- node used to simulate random ball movements made by
         the human. The ball can also be hidden -->
    <node pkg='assignment2' type='human.py'
      name='human_node' output='screen' respawn="false"/>

    <rosparam file="$(find assignment2)/config/motor_config.yaml" command="load"/>
    <node name="controller_spawner_node" pkg="controller_manager" type="spawner"
      output="screen" args="joint_state_controller joint_position_controller
        --shutdown-timeout 3">
    </node>
  </group>
  
  <!-- group for the ball -->
  <group ns="$(arg ns2)">

  <!-- nodes -->
  	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
      respawn="false" output="screen"
	  args="-urdf -model $(arg ns2) -param ball_description -x -7 -y 6 -z -0.5"/>

    <!-- node used to have the ball reaching the goal position
         issued by the human -->
	  <node name="go_to_point_ball_node" pkg="assignment2"
      type="go_to_point_ball.py"/>
  </group>

</launch>
