<?xml version="1.0"?>

<!--
  This is the launch file responsible for the execution of most
  of the parameters and nodes. The nodes launched here are:
     Gazebo server (with the world model)
     Gazebo client
     joint state publisher
     robot state publisher
     RViz
     URDF human model inside Gazebo
     URDF robot model inside both Gazebo and RViz
     the human.py script
     the dog_fsm.py script
     the dog_vision.py script
     a custom version of the explore_lite package
-->

<launch>
  <!-- Arguments -->
	  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="extra_gazebo_args" default=""/>
    <arg name="gui" default="true"/>
    <arg name="recording" default="false"/>
    <arg name="world" default="house" />
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="physics" default="ode"/>
    <arg name="verbose" default="false"/>
    <arg name="world_name" value="$(find assignment3)/worlds/$(arg world).world"/>
    <arg name="respawn_gazebo" default="false"/>
    <arg name="use_clock_frequency" default="false"/>
    <arg name="pub_clock_frequency" default="100"/>

    <!-- set command arguments -->
    <arg unless="$(arg paused)" name="command_arg1" value=""/>
    <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
    <arg unless="$(arg recording)" name="command_arg2" value=""/>
    <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
    <arg unless="$(arg verbose)" name="command_arg3" value=""/>
    <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
    <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
    <arg     if="$(arg debug)" name="script_type" value="debug"/>


  <!-- Parameters -->
    <!-- parameter specifying robot current state -->
    <param name='state' type='string' value='sleep'/>
    <!-- parameter specifying the maximum x-axis value for the map -->
    <param name='map/x_max' type='int' value='9'/>
    <!-- parameter specifying the maximum y-axis value for the map -->
    <param name='map/y_max' type='int' value='9'/>
    <!-- parameter specifying the minimum x-axis value for the map -->
    <param name='map/x_min' type='int' value='-9'/>
    <!-- parameter specifying the minimum y-axis value for the map -->
    <param name='map/y_min' type='int' value='-9'/>
    <!-- argument for home's x coordinate -->
    <arg name='home_x' value='-5'/>
    <!-- argument for home's y coordinate -->
    <arg name='home_y' value='8'/>
    <!-- parameter specifying robot home position (x coordinate).
         Home is assumed to be a place near the human position    -->
    <param name='home/x' type='int' value='$(arg home_x)'/>
    <!-- parameter specifying robot home position (y coordinate).
         Home is assumed to be a place near the human position    -->
    <param name='home/y' type='int' value='$(arg home_y)'/>
    <!-- argument used to define a placeholder coordinate, used
         to check whether a ball has already been discovered
         or not. It must be a value that is strictly greater than
         "map/x_max". Needed by all ball coordinate parameters    -->
    <arg name='placeholder_coord' value='100.0'/>
    <!-- parameter used to specify the x coordinate of the blue ball, once discovered -->
    <param name='blue/x' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the y coordinate of the blue ball, once discovered -->
    <param name='blue/y' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the x coordinate of the red ball, once discovered -->
    <param name='red/x' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the y coordinate of the red ball, once discovered -->
    <param name='red/y' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the x coordinate of the green ball, once discovered -->
    <param name='green/x' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the y coordinate of the green ball, once discovered -->
    <param name='green/y' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the x coordinate of the yellow ball, once discovered -->
    <param name='yellow/x' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the y coordinate of the yellow ball, once discovered -->
    <param name='yellow/y' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the x coordinate of the magenta ball, once discovered -->
    <param name='magenta/x' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the y coordinate of the magenta ball, once discovered -->
    <param name='magenta/y' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the x coordinate of the black ball, once discovered -->
    <param name='black/x' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify the y coordinate of the black ball, once discovered -->
    <param name='black/y' type='double' value='$(arg placeholder_coord)'/>
    <!-- parameter used to specify whether a new ball has been detected or not -->
    <param name='new_ball_detected' type='int' value='0'/>
    <!-- parameter used to identify which ball has to be looked for -->
    <param name='unknown_ball' type='string' value='none'/>
    
    <!-- parameter used to specify whether the robot, during
         the Play state, is ready to take orders or not     -->
    <param name='play_task_ready' type='int' value='0'/>
    <!-- parameter used to specify whether the robot, during
         the Play state, has completed the request or not -->
    <param name='play_task_done' type='int' value='0'/>

     <!-- parameter used to signal when the robot is stuck -->
    <param name='stuck' type='int' value='0'/>   

    <!-- dictionary paring each room to the corresponding colored ball -->
    <rosparam param="room_dict">{'entrance': 'blue',
                                 'closet': 'red',
                                 'livingroom': 'green',
                                 'kitchen': 'yellow',
                                 'bathroom': 'magenta',
                                 'bedroom': 'black'}
    </rosparam>
    
    <!-- set use_sim_time flag -->
    <param name="/use_sim_time" value="$(arg use_sim_time)"/>


  <!-- Nodes -->
    <!-- start Gazebo server-->
    <group if="$(arg use_clock_frequency)">
      <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
    </group>
    <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	    args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
    <!-- start Gazebo client -->
    <group if="$(arg gui)">
      <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
    </group>

    <!-- execute joint and robot state publishers -->  
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> 

    <!-- Start RViz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find assignment3)/config/config.rviz" />

    <!-- parameter required by the urdf_spawner - load human model in Gazebo -->
    <param name="human_description" textfile="$(find assignment3)/urdf/human.urdf" />   
    <!-- run a Python script to send a service call to gazebo_ros to spawn the human model -->
    <node name="urdf_spawner_human" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
      args="-urdf -model human -param human_description -x -6 -y 8.5 -z 0.34 -R 0 -P 0 -Y -0.75"/>

    <!-- parameter required by the urdf_spawner - load dog model in Gazebo-->
    <param name="robot_description" 
	    command="$(find xacro)/xacro --inorder $(find assignment3)/urdf/robot.xacro"/>
    <!-- run a Python script to send a service call to gazebo_ros to spawn the robotic dog -->
  	<node name="urdf_spawner_dog" pkg="gazebo_ros" type="spawn_model"
      respawn="false" output="screen"
	    args="-urdf -model robot1 -param robot_description -x $(arg home_x) -y $(arg home_y) -Y -1.57 -z 0.05"/>
    
    <!-- node used to handle the robot's finite state machine internal architecture -->
    <node pkg='assignment3' type='dog_fsm.py'
      name='dog_fsm_node' output='screen' respawn="false"/>

    <!-- node used to have the robot visually process its surroundings,
         looking for colored balls. It also takes control of the robotic
         dog movements when needed -->
    <node pkg='assignment3' type='dog_vision.py'
      name='dog_vision_node' output='screen' respawn="false"/>

    <!-- node used to simulate random room requests made by the human -->
    <node pkg='assignment3' type='human.py'
      name='human_node' output='screen' respawn="false"/>

    <!-- node executing, when prompted, a custom version of the explore_lite algorithm -->
    <node pkg="assignment3" type="assignment3_node" respawn="false" name="explore_node">
      <param name="robot_base_frame" value="link_chassis"/>
      <param name="costmap_topic" value="map"/>
      <param name="costmap_updates_topic" value="map_updates"/>
      <param name="visualize" value="true"/>
      <param name="planner_frequency" value="0.33"/>
      <param name="progress_timeout" value="30.0"/>
      <param name="potential_scale" value="3.0"/>
      <param name="orientation_scale" value="0.0"/>
      <param name="gain_scale" value="1.0"/>
      <param name="transform_tolerance" value="0.3"/>
      <param name="min_frontier_size" value="0.75"/>
    </node>
</launch>
